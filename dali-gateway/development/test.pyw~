#!/usr/bin/python

import serial, struct, time

import Tkinter
from Tkinter import *
import Tkinter as ttk

STATE_START = 0

class dali:
    def __init__(self, portname):
        self.portname = portname
        self.open()
        
    def __del__(self):
        self.close()

    def open(self):
        self.state = STATE_START
        self.pl = ""
        self.ser = serial.Serial(self.portname,38400,timeout=0)

    def close(self):
        if self.ser:
            self.ser.close()
            self.ser = False

    def cmd(self, addr, cmd):
        self.ser.write('$'+chr(addr)+chr(cmd))
        time.sleep(0.05)

    def tick(self):
        while self.ser.inWaiting():
            c = self.ser.read(1)
            if (self.state == STATE_START):
                print ord(c)
                if (c == NGHAM_START):
                    # Start character detected
                    self.state = STATE_HEADER
                    self.pl = ""

    def compare(self, addr):
        #Address high to low, then compare
        self.cmd(0b10110001, (addr&0xff0000)>>16)
        self.cmd(0b10110011, (addr&0xff00)>>8)
        self.cmd(0b10110101, (addr&0xff))
        self.cmd(0b10101001, 0b00000000)
        if (input("stop") == 1):
            return 1
        else:
            return 0
        # RETURN TRUE IF ANSWER!
        
    def search(self):
        addr = 0x800000
        for j in [pow(2,x) for x in range(22,-1,-1)]:
            if self.compare(addr):
                addr -= j
                print "Trying lower, 0x%0.6x" % addr

            else:
                addr += j
                print "Trying higher, 0x%0.6x" % addr
        print hex(addr)

    def randomize(self):
        # Initialize and randomize - ready for special command next 15 minutes
        self.cmd(0b10100101, 0b00000000)
        self.cmd(0b10100101, 0b00000000)
        time.sleep(0.3)
        self.cmd(0b10100111, 0b00000000)
        self.cmd(0b10100111, 0b00000000)

    def program_short(self, addr):
        #Program short address
        self.cmd(0b10110111, 0b00000011)
        self.cmd(0b10110111, 0b00000011)
        time.sleep(2)
        #Verify short
        self.cmd(0b10110001, 0b00000011)
        print "no"

d = dali("/dev/ttyUSB0")

def set_arc(self, addr, level):
    d.cmd(addr<<1, level)

#d.randomize()
#d.search()
#d.compare(0x516501)
#d.program_short(1)

def set_dimlevel(level):
	d.set_arc(1, level)

master = Tkinter.Tk()
master.title("DALI test")
dimlevel = DoubleVar()
Scale(master, variable=dimlevel, orient=HORIZONTAL, length=300, from_=0, to=254, tickinterval=50).grid(column=0, row=0)
master.mainloop()

##5. Verify the programmed short address with VERIFY SHORT ADDRESS command
##6. This ballast is removed from the search process by WITHDRAW command
##7. This procedure is repeated until all ballasts have a short address.
##8. The process is stopped by the TERMINATE command 
